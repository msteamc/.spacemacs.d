#+TITLE: make STEAM clear
#+SETUPFILE: ~/.spacemacs.d/org-templates/enpost.org

* Videos                                             :video:
:LOGBOOK:
CLOCK: [2019-10-20 Sun 17:06]--[2019-10-20 Sun 17:23] =>  0:17
CLOCK: [2019-10-09 Wed 22:09]--[2019-10-20 Sun 17:03] => 258:54
CLOCK: [2019-10-07 Mon 09:49]--[2019-10-09 Wed 22:09] => 60:20
CLOCK: [2019-10-06 Sun 23:34]--[2019-10-07 Mon 09:48] => 10:14
CLOCK: [2019-10-06 Sun 19:56]--[2019-10-06 Sun 22:44] =>  2:48
CLOCK: [2019-10-06 Sun 19:54]--[2019-10-06 Sun 19:56] =>  0:02
CLOCK: [2019-10-06 Sun 11:11]--[2019-10-06 Sun 19:54] =>  8:43
CLOCK: [2019-10-06 Sun 09:27]--[2019-10-06 Sun 11:11] =>  1:44
CLOCK: [2019-10-06 Sun 09:16]--[2019-10-06 Sun 09:27] =>  0:11
CLOCK: [2019-10-06 Sun 08:33]--[2019-10-06 Sun 09:16] =>  0:43
CLOCK: [2019-10-06 Sun 08:21]--[2019-10-06 Sun 08:33] =>  0:12
:END:
[2019-10-05 Sat 16:52]



* Posts
[2019-10-05 Sat 16:52]


** TODO Set up the TikZ in Emacs Org  :@Tools:Emacs:Org:TikZ:LaTeX:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_BUNDLE: set-up-the-tikz-in-emacs-org
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_project "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_dataset "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((caption . " [**Watch**](https://youtube.com)") (preview_only . "false"))
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("my-workflow-of-creating-a-video" "how-do-i-make-a-video")
:EXPORT_DESCRIPTION: An introduction to setup the TikZ environment in Emacs Org File. So that in Org file, you can generate either vector graph of =pdf=  format or raster graph of =png= format. Furthermore, you can export the vector graph when latex is called and otherwise raster graph.
:ORDERED:  t
:END:
:LOGBOOK:
CLOCK: [2019-12-05 Thu 23:12]--[2019-12-05 Thu 23:35] =>  0:23
:END:

{{{titlepage(petrinetfinal)}}}

#+INCLUDE: "./post/set-up-the-tikz-in-emacs-org-mode.org"


** TODO Export Markdown and latex using Emacs Org :Emacs:Org:Hugo:LaTeX:Markdown:
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_BUNDLE: export-markdown-and-latex-using-emacs-org
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_project "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("my-workflow-of-creating-a-video")
:EXPORT_DESCRIPTION: set up the Emacs org and ox-hugo to export the org files in markdown and latex format.
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2019-12-07 Sat 07:46]--[2019-12-07 Sat 07:48] =>  0:02
:END:
<2019-12-07 Sat 07:46>

#+INCLUDE: "./post/export-markdown-and-latex-using-emacs-org.org"

** TODO Drawing Graphs Using TikZ in Emacs Org
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_SECTION: post
:VISIBILITY: folded
:EXPORT_HUGO_BUNDLE: drawing-graphs-using-tikz-in-emacs-org
:EXPORT_DESCRIPTION: This post collects working examples of drawing graphs using TikZ in Emacs Org
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_project "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("my-workflow-of-creating-a-video")
:END:
:LOGBOOK:
CLOCK: [2019-12-08 Sun 17:30]--[2019-12-08 Sun 17:33] =>  0:03
:END:
<2019-12-08 Sun 17:30>


*** Drawing a TikZ picture in Emacs Org Mode
[2019-12-11 Wed 11:35]

#+caption: a minimum working example
#+name: a-minimum-working-example
#+header: :file  "~/Dropbox/mstemc_hugo/static/img/tikz/example3.pdf"
#+begin_src latex -n -r  :results raw :exports code
\usetikzlibrary{intersections,arrows.meta}
\begin{tikzpicture}[thin]
\draw (-1.5,0) -- (1.5,0);
\draw (0,-1.5) -- (0,1.5);
\filldraw[fill = green!20, draw = green!50!black] (0,0) circle[radius = 1cm];
\draw[help lines,very thin,step=.5cm,color=gray] (-1.5,-1.5) grid (1.5,1.5);
\draw (0,0) rectangle (.5,.5);
\draw (0,0) rectangle (-0.5,-0.5);
% relative coordinate
\draw[blue, very thick] (30:1) ++ (0,-0.5) --(0,0);
% name a path without drawing it
\path[name path = upward line] (1,0) -- (1,1);    (ref:path)
\path[name path = sloped line] (0,0) -- (30:1.5cm);
% use intersection of two path
\draw[name intersections={of = upward line and sloped line, by=x}]
     [very thick, orange] (1,0) -- (x);            (ref:intersections)
% use arrow
\draw[<->>] (0,0) -- (145:1);                      (ref:arrow1)
\draw[<-{Triangle[fill=red]}] (0,0) -- (30:1);     (ref:arrow2)
% use scope
\begin{scope}[very thick]                          (ref:scope1)
\draw (-0.4,0.4) -- (0.4,0.4);
\draw (-0.4,-0.4) -- (0.4,-0.4);
\end{scope}                                      (ref:scope2)
% use foreach
\foreach \x in {-1cm,-0.5cm,1cm}                 (ref:foreach1)
    \draw[red] (\x,-3pt) -- (\x,3pt);
\foreach \y in {-1cm,-0.5cm,1cm}
    \draw[red](-3pt,\y) -- (3pt,\y);             (ref:foreach2)
% using node
\draw (0,0)+(0.2,-0.2) node {\tiny $(0,0)$ };    (ref:node1)
\end{tikzpicture}
#+end_src

#+RESULTS: a-minimum-working-example
[[file:~/Dropbox/mstemc_hugo/static/img/tikz/example3.pdf]]


{{{newline}}}
The generated figure is shown as:
#+ATTR_HTML:  :width 800 :align center
#+ATTR_LATEX: :width 0.5\textwidth :align center
{{{if-latex(example3.pdf,example3.png)}}}

1. In [[a-minimum-working-example][the minimum working example]] line [[(path)]] , a path is named  without drawing
   it.
2. Line [[(intersections)]] gives an example of using library =intersections=. Note
   that you need to add the library using =\usetikzlibrary{intersections}=
   otherwise an error occurs during \LaTeX compiling.
3. Line [[(arrow1)]] and [[(arrow2)]] gives an example of using arrow. To make it work,
   =\usetikzlibrary{arrows.meta}= is needed. The library =arrows.meta= provides tons
   of types of arrows whick shock me when I see them the first time.
4. Line [[(scope1)]] to [[(scope2)]] gives an example of =scope= . In the environment, all
   the lines are drawn in the =very thick= style.
5. Line [[(foreach1)]] to [[(foreach2)]] gives an examplt of =foreach= . =foreach= is handy
   when you want to draw a list of objects. In [[a-minimum-working-example][the minimum working example]] , I
   draw a list of short red sticks along with the x-axis and y-axis.
6. Line [[(node1)]] is an example of =node=. The keyword =node= is typically followed by
   some options between =[]= and then some text between ={}=. Every node has flexible
   anchor options to decide where the text should be placed.
*** Another Example
[2019-12-12 Thu 20:15]

The code is shown as:
#+caption: another minimum working example
#+name: another-minimum-working-example
#+header: :file  "~/Dropbox/mstemc_hugo/static/img/tikz/example4.pdf"
#+begin_src latex -n -r  :results raw :exports code
\usetikzlibrary{intersections,arrows.meta}
\begin{tikzpicture}[scale=3]
  \clip (-0.6,-0.2) rectangle (0.6,1.51);
  \draw[step = .5cm, help lines] (-1.4,-1.4) grid (1.4,1.4);
  \filldraw[fill=green!20,draw = green!50!black] (0,0) -- (3mm,0mm)
  arc [start angle = 0, end angle = 30,radius = 3mm] -- cycle;
  \draw[->] (-1.5,0) -- (1.5,0);
  \draw[->] (0,-1.5) -- (0,1.5);
  \draw (0,0) circle [radius=1cm];
  \foreach \x in {-1,-0.5,1}
  \draw(\x cm, 1pt) -- (\x cm, -1 pt) node [anchor = north] {$\x$};
  \foreach \y in {-1,-0.5,1}
  \draw(1pt,\y cm) -- (-1pt, \y cm) node[anchor = east] {$\y$};
\end{tikzpicture}
#+end_src

#+RESULTS: another-minimum-working-example
[[file:~/Dropbox/mstemc_hugo/static/img/tikz/example4.pdf]]

The generated figure is shown as:
#+ATTR_HTML:  :width 800 :align center
#+ATTR_LATEX: :width 0.5\textwidth :align center
{{{if-latex(example4.pdf,example4.png)}}}


*** Some Basic Rules in TikZ
[2019-12-12 Thu 14:16]

1. The options appear in =[]=. No matter it is an object or an operation, the
   contents in the following  =[]= serve as options.

   Options =[]= can be at the very beginning of the environment =tikzpicture=
   following the operation, following the object.

2. =\filldraw= is a good command. It draws a closed loop and fill it with color or
   pattern. The colors for filling and drawing can be different.

3. Coordinates can be specified in x-y format, polar format.
   - The easiest way is =(x,y)= which means =x= cm in the x-axis and =y= cm in the
     y-axis;
   - =(a:x)= is the polar format which means =x= cm in direction =a= degree.
4. =(<p> |- <q>)= is another way to specify coordinates for example =(30:1 |- 0,0)=
   which means the interaction of a vertical line through =(30:1)= and a
   horizontal line through =(0,0)= .
5. Relative coordinates are possible with =+= and =++= in front of =(x,y)= and =(a:x)= .
   =+= is relative to the closest coordinate whereas =++= is relative to the very
   first coordinate of current path.

*** Some tips for in TikZ
[2019-12-12 Thu 15:14]

1. To use =intersections= to specify a coordinate, you need to include the
   library, i.e. =\usetikzlibrary{intersections}= is a must.

#+begin_src C  -n :exports code
int main()
{
  int i=0;
  printf();
}
#+end_src

bibliography:~/Dropbox/research_library/zcl.bib
bibliographystyle:unsrt

** TODO Walk Through the Petri-Net In TiKZ Tutorial
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_BUNDLE: walk-through-the-petri-net-in-tikz-tutorial
:EXPORT_DESCRIPTION: Analyze the Petri-Net tutorial in Chapter 3 of the TikZ manual line by line.
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_project "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("my-workflow-of-creating-a-video")
:END:
:LOGBOOK:
CLOCK: [2019-12-14 Sat 15:07]--[2019-12-14 Sat 15:21] =>  0:14
:END:
<2019-12-14 Sat 15:07>

{{{titlepage(petrinetfinal)}}}

Chapter 3 of the TikZ tutorial gives an example of Petri net. In this post, let
me work through the code line by line. During this example, more tikz libraries
are used, such as =arrows= , =decorations.pathmorphing= , =backgrounds= ,
=positioning= , =fit=, =petri= . These libraries should be added before the
=tikzpicture= environment.

#+caption: the petri net code
#+name: the-petri-net-code
#+header: :file  "~/Dropbox/mstemc_hugo/static/img/tikz/petrinetfinal.png"
#+begin_src latex -n -r :results raw :exports none
\begin{tikzpicture}
  [node distance=1.3cm,on grid,>=stealth',bend angle=45,auto,
  every place/.style= {minimum size=6mm,thick,draw=blue!75,fill=blue!20},
  every transition/.style={thick,draw=black!75,fill=black!20},
  red place/.style= {place,draw=red!75,fill=red!20},
  every label/.style= {blue}]
  \node [place,tokens=1] (w1) {};
  \node [place] (c1) [below=of w1] {};
  \node [place] (s) [below=of c1,label=above:$s\le 3$] {};
  \node [place] (c2) [below=of s] {};
  \node [place,tokens=1] (w2) [below=of c2] {};
  \node [transition] (e1) [left=of c1] {}
  edge [pre,bend left] (w1)
  edge [post,bend right] (s)
  edge [post] (c1);
  \node [transition] (e2) [left=of c2] {}
  edge [pre,bend right] (w2)
  edge [post,bend left] (s)
  edge [post] (c2);
  \node [transition] (l1) [right=of c1] {}
  edge [pre] (c1)
  edge [pre,bend left] (s)
  edge [post,bend right] node[swap] {2} (w1);
  \node [transition] (l2) [right=of c2] {}
  edge [pre] (c2)
  edge [pre,bend right] (s)
  edge [post,bend left] node {2} (w2);

  \begin{scope}[xshift=6cm]
    \node [place,tokens=1] (w1') {};
    \node [place] (c1') [below=of w1'] {};
    \node [red place] (s1') [below=of c1',xshift=-5mm]
    [label=left:$s$] {};
    \node [red place,tokens=3] (s2') [below=of c1',xshift=5mm]
    [label=right:$\bar s$] {};
    \node [place] (c2') [below=of s1',xshift=5mm] {};
    \node [place,tokens=1] (w2') [below=of c2'] {};
    \node [transition] (e1') [left=of c1'] {}
    edge [pre,bend left] (w1')
    edge [post] (s1')
    edge [pre] (s2')
    edge [post] (c1');
    \node [transition] (e2') [left=of c2'] {}
    edge [pre,bend right] (w2')
    edge [post] (s1')
    edge [pre] (s2')
    edge [post] (c2');
    \node [transition] (l1') [right=of c1'] {}
    edge [pre] (c1')
    edge [pre] (s1')
    edge [post] (s2')
    edge [post,bend right] node[swap] {2} (w1');
    \node [transition] (l2') [right=of c2'] {}
    edge [pre] (c2')
    edge [pre] (s1')
    edge [post] (s2')
    edge [post,bend left] node {2} (w2');
  \end{scope}
  \begin{scope}[on background layer]
    \node (r1) [fill=black!10,rounded corners,fit=(w1)(w2)(e1)(e2)(l1)(l2)] {};
    \node (r2) [fill=black!10,rounded corners,fit=(w1')(w2')(e1')(e2')(l1')(l2')] {};
  \end{scope}
  \draw [shorten >=1mm,-to,thick,decorate,
  decoration={snake,amplitude=.4mm,segment length=2mm,
    pre=moveto,pre length=1mm,post length=2mm}]
  (r1) -- (r2) node [above=1mm,midway,text width=3cm,align=center]
  {replacement of the \textcolor{red}{capacity} by \textcolor{red}{two places}};
\end{tikzpicture}
#+end_src

#+RESULTS: the-petri-net-code
[[file:~/Dropbox/mstemc_hugo/static/img/tikz/petrinetfinal.png]]



#+ATTR_HTML:  :width 800 :align center
#+ATTR_LATEX: :width 0.8\textwidth :align center
{{{if-latex(petrinet.pdf,petrinet.png)}}}



* Projects                                         :project:
[2019-10-05 Sat 16:53]

** TODO my workflow of creating a video
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: my-workflow-of-creating-a-video
:EXPORT_HUGO_SECTION: project
:EXPORT_DESCRIPTION: This collection of Videos and Posts describes my workflow of creating a video. Usage of some tools and methods are covered.
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("a")
:EXPORT_FILE_NAME: index
:END:

#+INCLUDE: "./project/my-workflow-of-creating-a-video.org"

* Courses                                           :course:
[2019-10-05 Sat 16:53]
