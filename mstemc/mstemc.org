#+TITLE: make STEAM clear
#+SETUPFILE: ~/Dropbox/zorg/org-templates/enpost.org

* Videos                                             :video:
:LOGBOOK:
CLOCK: [2019-10-20 Sun 17:06]--[2019-10-20 Sun 17:23] =>  0:17
CLOCK: [2019-10-09 Wed 22:09]--[2019-10-20 Sun 17:03] => 258:54
CLOCK: [2019-10-07 Mon 09:49]--[2019-10-09 Wed 22:09] => 60:20
CLOCK: [2019-10-06 Sun 23:34]--[2019-10-07 Mon 09:48] => 10:14
CLOCK: [2019-10-06 Sun 19:56]--[2019-10-06 Sun 22:44] =>  2:48
CLOCK: [2019-10-06 Sun 19:54]--[2019-10-06 Sun 19:56] =>  0:02
CLOCK: [2019-10-06 Sun 11:11]--[2019-10-06 Sun 19:54] =>  8:43
CLOCK: [2019-10-06 Sun 09:27]--[2019-10-06 Sun 11:11] =>  1:44
CLOCK: [2019-10-06 Sun 09:16]--[2019-10-06 Sun 09:27] =>  0:11
CLOCK: [2019-10-06 Sun 08:33]--[2019-10-06 Sun 09:16] =>  0:43
CLOCK: [2019-10-06 Sun 08:21]--[2019-10-06 Sun 08:33] =>  0:12
:END:
[2019-10-05 Sat 16:52]



* Posts
[2019-10-05 Sat 16:52]


** TODO Set up the TikZ in Emacs Org  :@Tools:Emacs:Org:TikZ:LaTeX:
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_BUNDLE: set-up-the-tikz-in-emacs-org
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_project "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_dataset "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :image '((caption . " [**Watch**](https://youtube.com)") (preview_only . "false"))
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("my-workflow-of-creating-a-video" "how-do-i-make-a-video")
:EXPORT_DESCRIPTION: An introduction to setup the TikZ environment in Emacs Org File. So that in Org file, you can generate either vector graph of =pdf=  format or raster graph of =png= format. Furthermore, you can export the vector graph when latex is called and otherwise raster graph.
:ORDERED:  t
:END:
:LOGBOOK:
CLOCK: [2019-12-05 Thu 23:12]--[2019-12-05 Thu 23:35] =>  0:23
:END:

{{{titlepage(petrinetfinal)}}}

#+INCLUDE: "./post/set-up-the-tikz-in-emacs-org-mode.org"


** TODO Export Markdown and latex using Emacs Org :Emacs:Org:Hugo:LaTeX:Markdown:
:PROPERTIES:
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_BUNDLE: export-markdown-and-latex-using-emacs-org
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_project "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("my-workflow-of-creating-a-video")
:EXPORT_DESCRIPTION: set up the Emacs org and ox-hugo to export the org files in markdown and latex format.
:EXPORT_FILE_NAME: index
:END:
:LOGBOOK:
CLOCK: [2019-12-07 Sat 07:46]--[2019-12-07 Sat 07:48] =>  0:02
:END:
<2019-12-07 Sat 07:46>

#+INCLUDE: "./post/export-markdown-and-latex-using-emacs-org.org"

** TODO Drawing Graphs Using TikZ in Emacs Org
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_SECTION: post
:VISIBILITY: folded
:EXPORT_HUGO_BUNDLE: drawing-graphs-using-tikz-in-emacs-org
:EXPORT_DESCRIPTION: This post collects working examples of drawing graphs using TikZ in Emacs Org
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_project "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("my-workflow-of-creating-a-video")
:END:
:LOGBOOK:
CLOCK: [2019-12-08 Sun 17:30]--[2019-12-08 Sun 17:33] =>  0:03
:END:
<2019-12-08 Sun 17:30>


*** Drawing a TikZ picture in Emacs Org Mode
[2019-12-11 Wed 11:35]

#+caption: a minimum working example
#+name: a-minimum-working-example
#+header: :file  "~/Dropbox/mstemc_hugo/static/img/tikz/example3.pdf"
#+begin_src latex -n -r  :results raw :exports code
\usetikzlibrary{intersections,arrows.meta}
\begin{tikzpicture}[thin]
\draw (-1.5,0) -- (1.5,0);
\draw (0,-1.5) -- (0,1.5);
\filldraw[fill = green!20, draw = green!50!black] (0,0) circle[radius = 1cm];
\draw[help lines,very thin,step=.5cm,color=gray] (-1.5,-1.5) grid (1.5,1.5);
\draw (0,0) rectangle (.5,.5);
\draw (0,0) rectangle (-0.5,-0.5);
% relative coordinate
\draw[blue, very thick] (30:1) ++ (0,-0.5) --(0,0);
% name a path without drawing it
\path[name path = upward line] (1,0) -- (1,1);    (ref:path)
\path[name path = sloped line] (0,0) -- (30:1.5cm);
% use intersection of two path
\draw[name intersections={of = upward line and sloped line, by=x}]
     [very thick, orange] (1,0) -- (x);            (ref:intersections)
% use arrow
\draw[<->>] (0,0) -- (145:1);                      (ref:arrow1)
\draw[<-{Triangle[fill=red]}] (0,0) -- (30:1);     (ref:arrow2)
% use scope
\begin{scope}[very thick]                          (ref:scope1)
\draw (-0.4,0.4) -- (0.4,0.4);
\draw (-0.4,-0.4) -- (0.4,-0.4);
\end{scope}                                      (ref:scope2)
% use foreach
\foreach \x in {-1cm,-0.5cm,1cm}                 (ref:foreach1)
    \draw[red] (\x,-3pt) -- (\x,3pt);
\foreach \y in {-1cm,-0.5cm,1cm}
    \draw[red](-3pt,\y) -- (3pt,\y);             (ref:foreach2)
% using node
\draw (0,0)+(0.2,-0.2) node {\tiny $(0,0)$ };    (ref:node1)
\end{tikzpicture}
#+end_src

#+RESULTS: a-minimum-working-example
[[file:~/Dropbox/mstemc_hugo/static/img/tikz/example3.pdf]]


{{{newline}}}
The generated figure is shown as:
#+ATTR_HTML:  :width 800 :align center
#+ATTR_LATEX: :width 0.5\textwidth :align center
{{{if-latex(example3.pdf,example3.png)}}}

1. In [[a-minimum-working-example][the minimum working example]] line [[(path)]] , a path is named  without drawing
   it.
2. Line [[(intersections)]] gives an example of using library =intersections=. Note
   that you need to add the library using =\usetikzlibrary{intersections}=
   otherwise an error occurs during \LaTeX compiling.
3. Line [[(arrow1)]] and [[(arrow2)]] gives an example of using arrow. To make it work,
   =\usetikzlibrary{arrows.meta}= is needed. The library =arrows.meta= provides tons
   of types of arrows whick shock me when I see them the first time.
4. Line [[(scope1)]] to [[(scope2)]] gives an example of =scope= . In the environment, all
   the lines are drawn in the =very thick= style.
5. Line [[(foreach1)]] to [[(foreach2)]] gives an examplt of =foreach= . =foreach= is handy
   when you want to draw a list of objects. In [[a-minimum-working-example][the minimum working example]] , I
   draw a list of short red sticks along with the x-axis and y-axis.
6. Line [[(node1)]] is an example of =node=. The keyword =node= is typically followed by
   some options between =[]= and then some text between ={}=. Every node has flexible
   anchor options to decide where the text should be placed.
*** Another Example
[2019-12-12 Thu 20:15]

The code is shown as:
#+caption: another minimum working example
#+name: another-minimum-working-example
#+header: :file  "~/Dropbox/mstemc_hugo/static/img/tikz/example4.pdf"
#+begin_src latex -n -r  :results raw :exports code
\usetikzlibrary{intersections,arrows.meta}
\begin{tikzpicture}[scale=3]
  \clip (-0.6,-0.2) rectangle (0.6,1.51);
  \draw[step = .5cm, help lines] (-1.4,-1.4) grid (1.4,1.4);
  \filldraw[fill=green!20,draw = green!50!black] (0,0) -- (3mm,0mm)
  arc [start angle = 0, end angle = 30,radius = 3mm] -- cycle;
  \draw[->] (-1.5,0) -- (1.5,0);
  \draw[->] (0,-1.5) -- (0,1.5);
  \draw (0,0) circle [radius=1cm];
  \foreach \x in {-1,-0.5,1}
  \draw(\x cm, 1pt) -- (\x cm, -1 pt) node [anchor = north] {$\x$};
  \foreach \y in {-1,-0.5,1}
  \draw(1pt,\y cm) -- (-1pt, \y cm) node[anchor = east] {$\y$};
\end{tikzpicture}
#+end_src

#+RESULTS: another-minimum-working-example
[[file:~/Dropbox/mstemc_hugo/static/img/tikz/example4.pdf]]

The generated figure is shown as:
#+ATTR_HTML:  :width 800 :align center
#+ATTR_LATEX: :width 0.5\textwidth :align center
{{{if-latex(example4.pdf,example4.png)}}}


*** Some Basic Rules in TikZ
[2019-12-12 Thu 14:16]

1. The basic three steps to draw a figure: 1. name a path; 2. add some
   objects along the path; 3. execute an action. At each step, many options are
   available to render your figure.
2. A path can be a =rectangle= =circle= =ellipse= =arc= =grid= =parabola, to= . Of course,
   the path can be just =move to= which is =--= . One more thing, you can specified
   horizontal and vertical lines just using =-|= or vertical then horizontal lines
   using =|-= . Notice that you can add options following =to= , but =--= cannot have
   options.
3. Along the path, nodes can be added at certain position. The position can be
   specified by absolute coordinates or relative coordinates. The coordinates
   can be specified by either xy-coordinates or polar system. Furthermore, the
   position can be calculated as intersections of two paths.
4. Once paths and nodes are ready, you can execute an action on it. An action
   can be =draw, fill, filldraw, pattern, shade, shadedraw, clip,
   useasboundingbox= . Do not be nervous. You will get familiar with them when
   you use them.
5. For the paths, nodes and actions, many options are available.
6. The options appear in =[]=. No matter it is an object or an operation, the
   contents in the following  =[]= serve as options.

   Options =[]= can be at the very beginning of the environment =tikzpicture=
   following the operation, following the object.

7. Coordinates can be specified in x-y format, polar format.
   - The easiest way is =(x,y)= which means =x= cm in the x-axis and =y= cm in the
     y-axis;
   - =(a:x)= is the polar format which means =x= cm in direction =a= degree.
8. =(<p> |- <q>)= is another way to specify coordinates for example =(30:1 |- 0,0)=
   which means the interaction of a vertical line through =(30:1)= and a
   horizontal line through =(0,0)= .
9. Relative coordinates are possible with =+= and =++= in front of =(x,y)= and =(a:x)= .
   =+= is relative to the very first coordinate whereas =++= is relative to the last
   coordinate of current path.


*** Some tips for in TikZ
[2019-12-12 Thu 15:14]

1. Walking through the *Part Tutorials and Guidelines* and *Chapter 11 Design
   Principles* in the TikZ manual, You can draw most figures you want. Diving
   into *Part 3* you can render your figures more beautiful. *Part V Libraries*
   provide many predefined patterns to save your time.
1. To use =intersections= to specify a coordinate, you need to include the
   library, i.e. =\usetikzlibrary{intersections}= is a must.
2. =\filldraw= is a good command. It draws a closed loop and fill it with color or
   pattern. The colors for filling and drawing can be different.



bibliography:~/Dropbox/research_library/zcl.bib
bibliographystyle:unsrt

** TODO Walk Through the Petri-Net In TiKZ Tutorial
:PROPERTIES:
:EXPORT_FILE_NAME: index
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_BUNDLE: walk-through-the-petri-net-in-tikz-tutorial
:EXPORT_DESCRIPTION: Analyze the Petri-Net tutorial in Chapter 3 of the TikZ manual line by line.
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_project "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("my-workflow-of-creating-a-video")
:END:
:LOGBOOK:
CLOCK: [2019-12-14 Sat 15:07]--[2019-12-14 Sat 15:21] =>  0:14
:END:
<2019-12-14 Sat 15:07>

{{{titlepage(petrinetfinal)}}}

Chapter 3 of the TikZ tutorial gives an example of Petri net. In this post, let
me work through the code line by line. During this example, more tikz libraries
are used, such as =arrows= , =decorations.pathmorphing= , =backgrounds= ,
=positioning= , =fit=, =petri= . These libraries should be added before the
=tikzpicture= environment.

#+caption: the petri net code
#+name: the-petri-net-code
#+header: :file  "~/Dropbox/mstemc_hugo/static/img/tikz/petrinetfinal.png"
#+begin_src latex -n -r :results raw :exports none
\begin{tikzpicture}
  [node distance=1.3cm,on grid,>=stealth',bend angle=45,auto,
  every place/.style= {minimum size=6mm,thick,draw=blue!75,fill=blue!20},
  every transition/.style={thick,draw=black!75,fill=black!20},
  red place/.style= {place,draw=red!75,fill=red!20},
  every label/.style= {blue}]
  \node [place,tokens=1] (w1) {};
  \node [place] (c1) [below=of w1] {};
  \node [place] (s) [below=of c1,label=above:$s\le 3$] {};
  \node [place] (c2) [below=of s] {};
  \node [place,tokens=1] (w2) [below=of c2] {};
  \node [transition] (e1) [left=of c1] {}
  edge [pre,bend left] (w1)
  edge [post,bend right] (s)
  edge [post] (c1);
  \node [transition] (e2) [left=of c2] {}
  edge [pre,bend right] (w2)
  edge [post,bend left] (s)
  edge [post] (c2);
  \node [transition] (l1) [right=of c1] {}
  edge [pre] (c1)
  edge [pre,bend left] (s)
  edge [post,bend right] node[swap] {2} (w1);
  \node [transition] (l2) [right=of c2] {}
  edge [pre] (c2)
  edge [pre,bend right] (s)
  edge [post,bend left] node {2} (w2);

  \begin{scope}[xshift=6cm]
    \node [place,tokens=1] (w1') {};
    \node [place] (c1') [below=of w1'] {};
    \node [red place] (s1') [below=of c1',xshift=-5mm]
    [label=left:$s$] {};
    \node [red place,tokens=3] (s2') [below=of c1',xshift=5mm]
    [label=right:$\bar s$] {};
    \node [place] (c2') [below=of s1',xshift=5mm] {};
    \node [place,tokens=1] (w2') [below=of c2'] {};
    \node [transition] (e1') [left=of c1'] {}
    edge [pre,bend left] (w1')
    edge [post] (s1')
    edge [pre] (s2')
    edge [post] (c1');
    \node [transition] (e2') [left=of c2'] {}
    edge [pre,bend right] (w2')
    edge [post] (s1')
    edge [pre] (s2')
    edge [post] (c2');
    \node [transition] (l1') [right=of c1'] {}
    edge [pre] (c1')
    edge [pre] (s1')
    edge [post] (s2')
    edge [post,bend right] node[swap] {2} (w1');
    \node [transition] (l2') [right=of c2'] {}
    edge [pre] (c2')
    edge [pre] (s1')
    edge [post] (s2')
    edge [post,bend left] node {2} (w2');
  \end{scope}
  \begin{scope}[on background layer]
    \node (r1) [fill=black!10,rounded corners,fit=(w1)(w2)(e1)(e2)(l1)(l2)] {};
    \node (r2) [fill=black!10,rounded corners,fit=(w1')(w2')(e1')(e2')(l1')(l2')] {};
  \end{scope}
  \draw [shorten >=1mm,-to,thick,decorate,
  decoration={snake,amplitude=.4mm,segment length=2mm,
    pre=moveto,pre length=1mm,post length=2mm}]
  (r1) -- (r2) node [above=1mm,midway,text width=3cm,align=center]
  {replacement of the \textcolor{red}{capacity} by \textcolor{red}{two places}};
\end{tikzpicture}
#+end_src


#+ATTR_HTML:  :width 800 :align center
#+ATTR_LATEX: :width 0.8\textwidth :align center
{{{if-latex(petrinet.pdf,petrinet.png)}}}
*** Walk Through It
[2019-12-17 Tue 22:48]

#+caption: walk through the code
#+name: walk through the code
#+header: :file  "~/Dropbox/mstemc_hugo/static/img/tikz/petrinetdetail.png"
#+begin_src latex -n -r :results raw :exports code
\begin{tikzpicture}
  [node distance = 1.3cm, on grid, >=stealth', bend angel = 45, auto,
  every place/.style= {minimum size = 6mm, thick,draw=blue!75,fill=blue!20},
  every transition/.style={thick,draw=black!75,fill=black!20},
  red place/.style = {place,draw = red!75,fill = red!20},
  every label/.style = {red}]
  \node [place,tokens=1] (w1)           {};
  \node [place]          (c1)  [below=of w1] {};
  \node [place]          (s)   [below=of c1,label=above:$s\le 3$] {};
  \node [place]          (c2)  [below=of s]                       {};
  \node [place]          (w2)  [below=of c2]                      {};

  \node [transition] (e1) [left = of c1] {}
    edge[pre,bend left]               (w1)
    edge[post,bend right]             (s)
    edge[post]                        (c1);
  \node [transition] (e2) [left = of c2] {}
    edge[pre,bend right]              (w2)
    edge[post,bend left]              (s)
    edge[post]                        (c2);
  \node [transition] (l1) [right = of c1] {}
  edge[pre]                         (c1)
  edge[pre,bend left]               (s)
  edge[post,bend right] node[swap] {2} (w1);
  \node [transition] (l2) [right = of c2] {}
  edge[pre]                         (c2)
  edge[pre,bend right] (s)
  edge[post,bend left] node{2} (w2);
\begin{scope}[xshift=6cm]
  \node [place,tokens=1] (w1')           {};
  \node [place]          (c1')  [below=of w1'] {};
  \node [red place]          (s1')   [below=of c1',,xshift=-5mm,label=left:$s$] {};
  \node [red place,tokens=3]          (s2')  [below=of c1',xshift=5mm,label=right:$\bar s$] {};
  \node [place]  (c2') [below=of s1',xshift=5mm] {};
  \node [place]  (w2') [below=of c2'] {};

  \node [transition] (e1') [left = of c1'] {}
  edge [pre,bend left] (w1')
  edge [post] (s1')
  edge [pre] (s2')
  edge [post] (c1');
  \node [transition] (e2') [left=of c2'] {}
  edge [pre,bend right] (w2')
  edge [post] (s1')
  edge [pre] (s2')
  edge [post] (c2');
  \node [transition] (l1') [right=of c1'] {}
  edge [pre] (c1')
  edge [pre] (s1')
  edge [post] (s2')
  edge [post,bend right] node[swap] {2} (w1');
  \node [transition] (l2') [right=of c2'] {}
  edge [pre] (c2')
  edge [pre] (s1')
  edge [post] (s2')
  edge [post,bend left] node {2} (w2');
\end{scope}
\begin{scope}[on background layer]
  \node (r1) [fill=black!40,rounded corners,fit = (w1)(w2)(e1)(e2)(l1)(l2)] {};
  \node (r2) [fill=black!40,rounded corners,fit=(w1')(w2')(e1')(e2')(l1')(l2')] {};
\end{scope}
\draw [shorten >=1mm,-to, thick, decorate, decoration ={snake,amplitude=.4mm,segment length=2mm,pre=moveto, pre length=1mm, post length = 2mm}]
(r1) -- (r2) node [above=1mm,midway,text width = 3cm, align = center]
{replacement of the \textcolor{red}{capacity} by \textcolor{red}{two places}};
\end{tikzpicture}
#+end_src

#+RESULTS: walk through the code
[[file:~/Dropbox/mstemc_hugo/static/img/tikz/petrinetdetail.png]]


#+ATTR_HTML:  :width 800 :align center
#+ATTR_LATEX: :width 0.8\textwidth :align center
{{{if-latex(petrinetdetail.pdf,petrinetdetail.png)}}}


** TODO Walk Through the Tutorial 4 of TikZ Manual
:PROPERTIES:
:EXPORT_FILE_NAME: index
:LATEX_TITLE: Walk Through the Tutorial 4 of TikZ Manual
:EXPORT_HUGO_SECTION: post
:EXPORT_HUGO_BUNDLE: walk-through-the-tutorial-4-of-tikz-manual
:EXPORT_DESCRIPTION: Analyze the Elements Example in Chapter 3 of the TikZ manual line by line.
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_project "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("my-workflow-of-creating-a-video")
:END:
:LOGBOOK:
CLOCK: [2019-12-19 Thu 22:36]--[2019-12-19 Thu 22:37] =>  0:01
:END:
<2019-12-19 Thu 22:36>

{{{titlepage(elements)}}}

#+caption: Euclid Amber version of the Elements
#+name: Euclid Amber version of the Elements
#+header: :file  "~/Dropbox/mstemc_hugo/static/img/tikz/elements.png"
#+begin_src latex -n -r :results raw :exports code
\begin{tikzpicture}
  [thick,help lines/.style={thin,draw=black!50}]
  \def\A{\textcolor{input}{$A$}}
  \def\B{\textcolor{input}{$B$}}
  \def\C{\textcolor{output}{$C$}}
  \def\D{$D$}
  \def\E{$E$}

  \colorlet{input}{blue!80!black}
  \colorlet{output}{red!70!black}
  \colorlet{triangle}{orange}

  \coordinate [label=left:\A] (A) at ($(0,0) + .0*(rand,rand)$);
  \coordinate [label=right:\B] (B) at ($(1.25,0.25) + .0*(rand,rand)$);

  \draw [input] (A) -- (B);

  \node [name path=D,help lines,draw,label=left:\D] (D) at (A) [circle through = (B)] {};
  \node [name path=E,help lines,draw,label=right:\E] (E) at (B) [circle through = (A)] {};

  \path [name intersections = {of =D and E, by={[label=above:\C]C}}];
  \draw [output] (A) -- (C) -- (B);

  \foreach \point in {A,B,C}
  \fill[black,opacity=.5] (\point) circle (2pt);
  \begin{pgfonlayer}{background}
    \fill[triangle!80] (A) -- (C) -- (B) -- cycle;
  \end{pgfonlayer}

  % \node [below right, text width = 10cm,align = justify] at (4,3) {
  %   \small\textbf{Proposition I} \par
  %   \emph{To construct an \textcolor{triangle}{equilateral triangle}
  %     on a given \textcolor{input}{finite straight line.}}
  %   \par \vskip 1em
  %   Let \A\B\ be the given \textcolor{input}{finite straight line}. \dots
  % };

\end{tikzpicture}
#+end_src

#+RESULTS: Euclid Amber version of the Elements
[[file:~/Dropbox/mstemc_hugo/static/img/tikz/elements.png]]



#+ATTR_HTML:  :width 800 :align center
#+ATTR_LATEX: :width 0.8\textwidth :align center
{{{if-latex(elements.pdf,elements.png)}}}
*** Proposition II
[2019-12-20 Fri 21:01]

#+caption: Proposition II
#+name: Proposition II
#+header: :file  "~/Dropbox/mstemc_hugo/static/img/tikz/propositionII.pdf"
#+begin_src latex -n -r :results raw :exports none
\begin{tikzpicture}
[thick,help lines./style={thin,draw=black!50}]
\def\A{\textcolor{orange}{$A$}}
\def\B{\textcolor{input}{$B$}}
\def\C{\textcolor{input}{C}}
\def\D{$D$}
\def\E{$E$}
\def\F{$F$}
\def\G{$G$}
\def\H{$H$}
\def\K{$K$}
\def\L{\textcolor{output}{$L$}}

\colorset{input}{blue!80!black}
\colorset{output}{red!70!black}

\coordinate [label=left:\A] (A) at (0,0) ;
\coordinate [label=right:\B] (B) at (1,0.2);
\coordinate [label=above:\C] (C) at (1,2);

\draw [input] (B) -- (C);
\draw [help lines] (A) -- (B);

\coordinate [label=above:\D] (D) at ($(A)!.5!(B)!{sin(60)*2}!90:(B)$);

\draw [help lines] (D) -- ($(D)!3.75!(A)$) coordinate [label=-135:\E] (E);
\draw [help lines] (D) -- ($(D)!3.75!(B)$) coordinate [label=-45:\F] (F);

\node (H) at (B) [name path =H, help lines, circle through=(C),draw,label=135:\H] {};
\path [name path=B--F] (B) -- (F);
\path [name intersections = {of= H and B--F,by = {[label=right:\G]G}}];

\node (K) at (D) [name path =K,help lines,circle through = (G),draw,label=135:\K]{};
\path [name path = A--E] (A) -- (E);

\path [name intersections = {of = K and A--E,by={[label=below:\L]L}}];

\draw [outptu] (A) -- (L);
\foreach \point in {A,B,C,D,G,L}
\fill [black,opacity=0.5] (\point) circle (2pt);

\end{tikzpicture}
#+end_src


#+RESULTS: Proposition II
[[file:~/Dropbox/mstemc_hugo/static/img/tikz/propositionII.pdf]]


#+ATTR_HTML:  :width 800 :align center
#+ATTR_LATEX: :width 0.8\textwidth :align center
{{{if-latex(propositionII.pdf,propositionII.png)}}}
*** A Lecture Map Tutorial
[2019-12-22 Sun 07:45]

#+caption: A Lecture Map Tutorial
#+name: A Lecture Map Tutorial
#+header: :file  "~/Dropbox/mstemc_hugo/static/img/tikz/lecturemap.png"
#+begin_src latex -n -r :results raw :exports none
\begin{tikzpicture}
[font=\footnotesize, grow=right, level 1./style ={sibling distance=1em},level 2./style={sibling distance=1em}, level distance=5cm]
  \node {Computational Comlexity}
    child { node {Problem Measures}
      child{ node {Problem Measures}}
      child{ node {Problem Aspects}}
      child{ node {Problem Domains}}
      child{ node {Key Problems}}
    }
    child {node {Computational Models}
      child { node {Turing Machines}}
      child { node {Random-Access Machines}}
      child { node {Circuits}}
      child { node {Binary Decision Diagrams}}
      child { node {Oracle Machines}}
      child { node {Programming in Logic}}
    }
    child {node {Measuring Complexity}
      child {node {Complexity Measures}}
      child {node {Classifying Complexity}}
      child {node {Comparing Complexity}}
      child {node {Describing Complexity}}
    }
    child {node {Solving Problems}
      child {node {Exact Algorithms}}
      child {node {Randomization}}
      child {node {Fixed-Parameter Algorithms}}
      child {node {Parallel Computation}}
      child {node {Partial Solutions}}
      child {node {Approximation}}
    };
\end{tikzpicture}
#+end_src

#+RESULTS: A Lecture Map Tutorial
[[file:~/Dropbox/mstemc_hugo/static/img/tikz/lecturemap.png]]


#+ATTR_HTML:  :width 800 :align center
#+ATTR_LATEX: :width 0.8\textwidth :align center
{{{if-latex(lecturemap.pdf,lecturemap.png)}}}

* Projects                                         :project:
[2019-10-05 Sat 16:53]

** TODO my workflow of creating a video
:PROPERTIES:
:EXPORT_HUGO_BUNDLE: my-workflow-of-creating-a-video
:EXPORT_HUGO_SECTION: project
:EXPORT_DESCRIPTION: This collection of Videos and Posts describes my workflow of creating a video. Usage of some tools and methods are covered.
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_pdf "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_code "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url_video "#"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :projects '("a")
:EXPORT_FILE_NAME: index
:END:

#+INCLUDE: "./project/my-workflow-of-creating-a-video.org"

* Courses                                           :course:
[2019-10-05 Sat 16:53]
